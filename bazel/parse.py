from pathlib import Path
from typing import Dict

from .module import Module
from .rule_module import CcModule, RuleModule


class Modules:
    third_party_libs = {
        '@com_google_protobuf//:protobuf': 'libprotobuf-cpp-full',
        '@fastrtps//:fastrtps': 'libfastrtps',
        '@fastcdr//:fastcdr': 'libfastcdr',
        '@local_config_python//:python_headers': 'python_headers',
        '@local_config_python//:python_lib': 'python_lib',
        '@ncurses5//:ncurses5': 'libncurses5',
        '@com_github_google_glog//:glog': 'libglog',
        '@com_github_gflags_gflags//:gflags': 'libgflags',
        '@uuid//:uuid': 'libuuid',
    }

    def __init__(self):
        self.modules: Dict[str, Module] = {}
        for name, android_name in self.third_party_libs.items():
            module = CcModule(name, location='', rule_class='cc_library_shared', attribute=[], normal_name=android_name)
            self.modules[name] = module

    def load_cquery_result(self, message):
        for target in message["results"]:
            self.load_target(target)
        module_cyber = CcModule('libcyber', '/apollo/cyber/BUILD:7:11', 'cc_library', [])
        module_cyber.linkshared = True
        module_cyber.for_output = True
        self.modules['libcyber'] = module_cyber

        self.post_load()
        self.parse()

    def load_target(self, message):
        target = message["target"]
        _type = target["type"]
        if _type == "RULE":
            module = RuleModule.create_rule(target)
        elif _type == "SOURCE_FILE":
            module = None
        elif _type == "GENERATED_FILE":
            module = None
        elif _type == "PACKAGE_GROUP":
            module = None
        elif _type == "ENVIRONMENT_GROUP":
            module = None
        else:
            module = None
        if module:
            self.modules[module.name] = module

    def post_load(self):
        module_list = list(self.modules.values())
        for module in module_list:
            module.post_load(self.modules)

    def parse(self):
        for module in self.modules.values():
            module.parse(self.modules)

    def gen_android_bp_files(self, base_dir: Path):
        bp_file_path = Path.joinpath(base_dir, 'Android.bp')
        with open(bp_file_path, mode='w+') as bp_file:
            bp_file.write('/* Auto-generated by bazel BUILD file */\n')
            for module in self.modules.values():
                if not module.path:
                    continue
                module.output(bp_file)
